{"id": 0, "code": "```python\nresult = a.shape\n```", "metadata": {"problem_id": 0, "library_problem_id": 0, "library": "JAX", "test_case_cnt": 4, "perturbation_type": "Origin", "perturbation_origin_id": 0}}
{"id": 1, "code": "```python\nx = x[~jnp.isnan(x)]```", "metadata": {"problem_id": 1, "library_problem_id": 1, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 1}}
{"id": 2, "code": "```python\nx = jnp.where(jnp.isnan(x), jnp.inf, x)```", "metadata": {"problem_id": 2, "library_problem_id": 2, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 1}}
{"id": 3, "code": "```python\nresult = [list(filter(lambda val: not jnp.isnan(val), row)) for row in x]\n```", "metadata": {"problem_id": 3, "library_problem_id": 3, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 1}}
{"id": 4, "code": "```python\nb = jnp.eye(jnp.max(a) + 1)[a]\n```", "metadata": {"problem_id": 4, "library_problem_id": 4, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 4}}
{"id": 5, "code": "```python\nb = jnp.eye(jnp.max(a) + 1)[a]\n```", "metadata": {"problem_id": 5, "library_problem_id": 5, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 4}}
{"id": 6, "code": "```python\nb = jnp.eye(len(a))[a - a.min()]\n```", "metadata": {"problem_id": 6, "library_problem_id": 6, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 4}}
{"id": 7, "code": "```python\nb = jnp.eye(len(a))[jnp.argsort(jnp.argsort(a))]\n```", "metadata": {"problem_id": 7, "library_problem_id": 7, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 8, "code": "```python\nb = jnp.eye(jnp.max(a) + 1)[a]\n```", "metadata": {"problem_id": 8, "library_problem_id": 8, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 4}}
{"id": 9, "code": "```python\nresult = jnp.percentile(a, p)\n```", "metadata": {"problem_id": 9, "library_problem_id": 9, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 9}}
{"id": 10, "code": "```python\nB = A.reshape(-1, ncol)\n```", "metadata": {"problem_id": 10, "library_problem_id": 10, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 10}}
{"id": 11, "code": "```python\nB = A.reshape(nrow, -1)\n```", "metadata": {"problem_id": 11, "library_problem_id": 11, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 10}}
{"id": 12, "code": "```python\nB = A[:(A.size // ncol) * ncol].reshape(-1, ncol)\n```", "metadata": {"problem_id": 12, "library_problem_id": 12, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 13, "code": "```python\nB = jnp.reshape(jnp.flip(A), (-1, ncol))\n```", "metadata": {"problem_id": 13, "library_problem_id": 13, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 10}}
{"id": 14, "code": "```python\nresult = jnp.concatenate((jnp.full((shift,), jnp.nan), a[:-shift])) if shift > 0 else jnp.concatenate((a[-shift:], jnp.full((-shift,), jnp.nan)))\n```", "metadata": {"problem_id": 14, "library_problem_id": 14, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 14}}
{"id": 15, "code": "```python\ndef shift(arr, shift):\n    if shift > 0:\n        return jnp.pad(arr, ((0, 0), (shift, 0)), mode='constant', constant_values=jnp.nan)[:, :-shift]\n    elif shift < 0:\n        return jnp.pad(arr, ((0, 0), (0, -shift)), mode='constant', constant_values=jnp.nan)[:, -shift:]\n    else:\n        return arr\n\nresult = shift(a, shift)\n```", "metadata": {"problem_id": 15, "library_problem_id": 15, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 14}}
{"id": 16, "code": "```python\ndef shift(arr, shifts):\n    max_len = arr.shape[1]\n    result = jnp.full(arr.shape, jnp.nan)\n    \n    for i, shift_val in enumerate(shifts):\n        if shift_val > 0:\n            result = result.at[i, shift_val:max_len].set(arr[i, :max_len - shift_val])\n        elif shift_val < 0:\n            result = result.at[i, :max_len + shift_val].set(arr[i, -shift_val:max_len])\n        else:\n            result = result.at[i].set(arr[i])\n    \n    return result\n\nresult = shift(a, shift)\n```", "metadata": {"problem_id": 16, "library_problem_id": 16, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 14}}
{"id": 17, "code": "```python\nkey = jax.random.PRNGKey(0)  # Set a fixed seed for reproducibility\nr_old = jax.random.randint(key, (100, 2000), 0, 3) - 1\nr_new = jax.random.randint(key, (100, 2000), 0, 3) - 1\n```", "metadata": {"problem_id": 17, "library_problem_id": 17, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 17}}
{"id": 18, "code": "```python\nresult = jnp.argmax(a, axis=None)\n```", "metadata": {"problem_id": 18, "library_problem_id": 18, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 18}}
{"id": 19, "code": "```python\nresult = jnp.ravel_multi_index(jnp.unravel_index(jnp.argmin(a), a.shape), a.shape)", "metadata": {"problem_id": 19, "library_problem_id": 19, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 20, "code": "```python\nresult = jnp.unravel_index(jnp.argmax(a, axis=None), a.shape, order='F')\n```", "metadata": {"problem_id": 20, "library_problem_id": 20, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 21, "code": "```python\nresult = jnp.unravel_index(jnp.argmax(a), a.shape)\n```", "metadata": {"problem_id": 21, "library_problem_id": 21, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 18}}
{"id": 22, "code": "```python\n    result = jnp.argmax(a, axis=None)\n    ### END SOLUTION\n    return result\n```", "metadata": {"problem_id": 22, "library_problem_id": 22, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 18}}
{"id": 23, "code": "```python\nresult = jnp.unravel_index(jnp.argsort(a, axis=None)[-2], a.shape)\n```", "metadata": {"problem_id": 23, "library_problem_id": 23, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 18}}
{"id": 24, "code": "```python\na = a[:, ~jnp.isnan(a).any(axis=0)]\n```", "metadata": {"problem_id": 24, "library_problem_id": 24, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 24}}
{"id": 25, "code": "```python\na = a[~jnp.isnan(a).any(axis=1)]\n```", "metadata": {"problem_id": 25, "library_problem_id": 25, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 24}}
{"id": 26, "code": "```python\nresult = jnp.array(a)", "metadata": {"problem_id": 26, "library_problem_id": 26, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 26}}
{"id": 27, "code": "```python\na = a[:, permutation]\n```", "metadata": {"problem_id": 27, "library_problem_id": 27, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 27}}
{"id": 28, "code": "```python\nresult = a[permutation]\n```", "metadata": {"problem_id": 28, "library_problem_id": 28, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 27}}
{"id": 29, "code": "```python\nresult = jnp.unravel_index(jnp.argmin(a), a.shape)", "metadata": {"problem_id": 29, "library_problem_id": 29, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 29}}
{"id": 30, "code": "```python\nresult = jnp.unravel_index(jnp.argmax(a), a.shape)", "metadata": {"problem_id": 30, "library_problem_id": 30, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 29}}
{"id": 31, "code": "```python\nresult = jnp.argwhere(a == jnp.min(a))\n```", "metadata": {"problem_id": 31, "library_problem_id": 31, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 29}}
{"id": 32, "code": "```python\nresult = jnp.sin(jnp.radians(degree))", "metadata": {"problem_id": 32, "library_problem_id": 32, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 32}}
{"id": 33, "code": "```python\nresult = jnp.cos(jnp.radians(degree))", "metadata": {"problem_id": 33, "library_problem_id": 33, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 32}}
{"id": 34, "code": "```python\nresult = jnp.where(jnp.sin(jnp.radians(number)) > jnp.sin(number), 0, 1)\n```", "metadata": {"problem_id": 34, "library_problem_id": 34, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 35, "code": "```python\nresult = jnp.degrees(jnp.arcsin(value))\n```", "metadata": {"problem_id": 35, "library_problem_id": 35, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 32}}
{"id": 36, "code": "```python\nresult = jnp.pad(A, (0, length - A.size), mode='constant')\n```", "metadata": {"problem_id": 36, "library_problem_id": 36, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 36}}
{"id": 37, "code": "```python\ndef pad(A, length):\n    return jnp.pad(A, (0, max(0, length - A.size)), mode='constant')\n\nresult = pad(A, 8)\n```", "metadata": {"problem_id": 37, "library_problem_id": 37, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 36}}
{"id": 38, "code": "```python\na = jnp.power(a, power)\n```", "metadata": {"problem_id": 38, "library_problem_id": 38, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 38}}
{"id": 39, "code": "```python\n    return jnp.power(a, power)\n```", "metadata": {"problem_id": 39, "library_problem_id": 39, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 38}}
{"id": 40, "code": "```python\nfrom math import gcd\n\ndef reduce_fraction(numerator, denominator):\n    common_divisor = gcd(numerator, denominator)\n    return (numerator // common_divisor, denominator // common_divisor)\n\nresult = reduce_fraction(numerator, denominator)\n```", "metadata": {"problem_id": 40, "library_problem_id": 40, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 40}}
{"id": 41, "code": "```python\n    gcd = jnp.gcd(numerator, denominator)\n    return (numerator // gcd, denominator // gcd)\n```", "metadata": {"problem_id": 41, "library_problem_id": 41, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Surface", "perturbation_origin_id": 40}}
{"id": 42, "code": "```python\nif denominator == 0:\n    result = (float('nan'), float('nan'))\nelse:\n    gcd = jnp.gcd(numerator, denominator)\n    result = (numerator // gcd, denominator // gcd)\n```", "metadata": {"problem_id": 42, "library_problem_id": 42, "library": "JAX", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 40}}
{"id": 43, "code": "```python\nresult = (a + b + c) / 3", "metadata": {"problem_id": 43, "library_problem_id": 43, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 43}}
{"id": 44, "code": "```python\nresult = jnp.maximum(jnp.maximum(a, b), c)", "metadata": {"problem_id": 44, "library_problem_id": 44, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 43}}
{"id": 45, "code": "```python\nresult = a[jnp.diag_indices(a.shape[0], k=a.shape[1]-1)]\n```", "metadata": {"problem_id": 45, "library_problem_id": 45, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 45}}
{"id": 46, "code": "```python\nresult = a[jnp.arange(a.shape[0]), a.shape[1] - 1 - jnp.arange(a.shape[0])]\n```", "metadata": {"problem_id": 46, "library_problem_id": 46, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 45}}
{"id": 47, "code": "```python\nresult = jnp.array([a[jnp.arange(a.shape[0]), a.shape[1] - 1 - jnp.arange(a.shape[0])],\n                   a[jnp.arange(a.shape[0]), jnp.arange(a.shape[1])]])\n```", "metadata": {"problem_id": 47, "library_problem_id": 47, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 45}}
{"id": 48, "code": "```python\nrows, cols = a.shape\ndiagonal_indices = [(i, cols - 1 - i) for i in range(min(rows, cols))]\nresult = jnp.array([a[diagonal_indices[i]] for i in range(len(diagonal_indices))])\n```", "metadata": {"problem_id": 48, "library_problem_id": 48, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 45}}
{"id": 49, "code": "```python\nresult = X.flatten().tolist()\n```", "metadata": {"problem_id": 49, "library_problem_id": 49, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 49}}
{"id": 50, "code": "```python\nresult = X.flatten(order='C').tolist()\n```", "metadata": {"problem_id": 50, "library_problem_id": 50, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 49}}
{"id": 51, "code": "```python\n    result = []\n    for row in X:\n        for element in row:\n            result.append(element)\n    return result\n```", "metadata": {"problem_id": 51, "library_problem_id": 51, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 49}}
{"id": 52, "code": "```python\nresult = [X[i, j] for j in range(X.shape[1]) for i in range(X.shape[0])]\n```", "metadata": {"problem_id": 52, "library_problem_id": 52, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 49}}
{"id": 53, "code": "```python\nresult = jnp.array([int(digit) for digit in mystr])\n```", "metadata": {"problem_id": 53, "library_problem_id": 53, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 53}}
{"id": 54, "code": "```python\nresult = jnp.cumsum(a[:, col] * multiply_number)\n```", "metadata": {"problem_id": 54, "library_problem_id": 54, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 54}}
{"id": 55, "code": "```python\nresult = jnp.cumsum(a[row] * multiply_number)\n```", "metadata": {"problem_id": 55, "library_problem_id": 55, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 54}}
{"id": 56, "code": "```python\nresult = jnp.prod(a[row] / divide_number)\n```", "metadata": {"problem_id": 56, "library_problem_id": 56, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 54}}
{"id": 57, "code": "```python\nfrom jax import linalg\n\n# Perform QR decomposition\nq, r = linalg.qr(a.T)\n\n# Identify linearly independent vectors\nindependent_indices = jnp.where(jnp.abs(r.diagonal()) > 1e-10)[0]\nresult = q[:, independent_indices].T\n```", "metadata": {"problem_id": 57, "library_problem_id": 57, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 57}}
{"id": 58, "code": "```python\nresult = a.shape[1]\n```", "metadata": {"problem_id": 58, "library_problem_id": 58, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 58}}
{"id": 59, "code": "```python\nimport jax.numpy as jnp\nimport scipy.stats\n\n# Calculate means and standard deviations\nmean_a = jnp.mean(a)\nmean_b = jnp.mean(b)\nstd_a = jnp.std(a, ddof=1)\nstd_b = jnp.std(b, ddof=1)\n\n# Calculate the sizes\nn_a = a.size\nn_b = b.size\n\n# Calculate the t-statistic\nt_stat = (mean_a - mean_b) / jnp.sqrt((std_a**2 / n_a) + (std_b**2 / n_b))\n\n# Calculate the degrees of freedom\ndf = (std_a**2 / n_a + std_b**2 / n_b)**2 / ((std_a**2 / n_a)**2 / (n_a - 1) + (std_b**2 / n_b)**2 / (n_b - 1))\n\n# Calculate the p-value for a two-tailed test\np_value = 2 * scipy.stats.t.sf(jnp.abs(t_stat), df)\n```", "metadata": {"problem_id": 59, "library_problem_id": 59, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 59}}
{"id": 60, "code": "```python\n# Remove NaNs from both samples\na_clean = a[~jnp.isnan(a)]\nb_clean = b[~jnp.isnan(b)]\n\n# Calculate means and standard deviations\nmean_a = jnp.mean(a_clean)\nmean_b = jnp.mean(b_clean)\nstd_a = jnp.std(a_clean, ddof=1)\nstd_b = jnp.std(b_clean, ddof=1)\n\n# Calculate sample sizes\nn_a = a_clean.size\nn_b = b_clean.size\n\n# Calculate the pooled standard deviation\npooled_std = jnp.sqrt(((n_a - 1) * std_a**2 + (n_b - 1) * std_b**2) / (n_a + n_b - 2))\n\n# Calculate the t-statistic\nt_stat = (mean_a - mean_b) / (pooled_std * jnp.sqrt(1/n_a + 1/n_b))\n\n# Calculate the degrees of freedom\ndf = n_a + n_b - 2\n\n# Calculate the p-value for a two-tailed test\np_value = 2 * (1 - scipy.stats.t.cdf(jnp.abs(t_stat), df))\n```", "metadata": {"problem_id": 60, "library_problem_id": 60, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 61, "code": "```python\n# Calculate the pooled standard deviation\npooled_std = jnp.sqrt(((anobs - 1) * avar + (bnobs - 1) * bvar) / (anobs + bnobs - 2))\n\n# Calculate the t-statistic\nt_stat = (amean - bmean) / (pooled_std * jnp.sqrt(1/anobs + 1/bnobs))\n\n# Calculate the degrees of freedom\ndf = anobs + bnobs - 2\n\n# Calculate the p-value for a two-tailed test\np_value = 2 * (1 - scipy.stats.t.cdf(jnp.abs(t_stat), df))\n```", "metadata": {"problem_id": 61, "library_problem_id": 61, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 59}}
{"id": 62, "code": "```python\noutput = A[~jnp.isin(A, B).any(axis=1)]\n```", "metadata": {"problem_id": 62, "library_problem_id": 62, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 62}}
{"id": 63, "code": "```python\noutput = jnp.concatenate([A[~jnp.isin(A, B).any(axis=1)], B[~jnp.isin(B, A).any(axis=1)]])\n```", "metadata": {"problem_id": 63, "library_problem_id": 63, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 62}}
{"id": 64, "code": "```python\nc = jnp.take_along_axis(b, sort_indices[:, :, None], axis=0)\n```", "metadata": {"problem_id": 64, "library_problem_id": 64, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 64}}
{"id": 65, "code": "```python\nc = jnp.take_along_axis(b, sort_indices[:, :, None], axis=0)\n```", "metadata": {"problem_id": 65, "library_problem_id": 65, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 64}}
{"id": 66, "code": "```python\nc = jnp.take_along_axis(b, sort_indices[:, :, None], axis=0)\n```", "metadata": {"problem_id": 66, "library_problem_id": 66, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 64}}
{"id": 67, "code": "```python\nsorted_indices = jnp.argsort(jnp.sum(a, axis=(1, 2)))\nresult = b[sorted_indices]\n```", "metadata": {"problem_id": 67, "library_problem_id": 67, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 64}}
{"id": 68, "code": "```python\na = jnp.delete(arr, 2, axis=1)\n```", "metadata": {"problem_id": 68, "library_problem_id": 68, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 68}}
{"id": 69, "code": "```python\na = jnp.delete(arr, 2, axis=0)", "metadata": {"problem_id": 69, "library_problem_id": 69, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 68}}
{"id": 70, "code": "```python\na = jnp.delete(arr, [0, 2], axis=1)\n```", "metadata": {"problem_id": 70, "library_problem_id": 70, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 71, "code": "```python\nvalid_indices = del_col[del_col < a.shape[1]]\nresult = a[:, valid_indices]\nresult = result[:, jnp.arange(result.shape[1]) != 0]  # Keep only the 3rd column\n```", "metadata": {"problem_id": 71, "library_problem_id": 71, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 68}}
{"id": 72, "code": "```python\na = jnp.insert(a, pos, element)", "metadata": {"problem_id": 72, "library_problem_id": 72, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 72}}
{"id": 73, "code": "```python\na = jnp.insert(a, pos, jnp.array(element), axis=0)\n```", "metadata": {"problem_id": 73, "library_problem_id": 73, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 72}}
{"id": 74, "code": "```python\n    return jnp.concatenate((a[:pos], jnp.array([element]), a[pos:]))\n```", "metadata": {"problem_id": 74, "library_problem_id": 74, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 72}}
{"id": 75, "code": "```python\na = jnp.insert(a, pos, element, axis=0)\n```", "metadata": {"problem_id": 75, "library_problem_id": 75, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 72}}
{"id": 76, "code": "```python\nresult = [jnp.array(arr) for arr in array_of_arrays]  # Deep copy each array in the list\nEND SOLUTION", "metadata": {"problem_id": 76, "library_problem_id": 76, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 76}}
{"id": 77, "code": "```python\nresult = jnp.all(a == a[0], axis=0)", "metadata": {"problem_id": 77, "library_problem_id": 77, "library": "JAX", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 77}}
{"id": 78, "code": "```python\nresult = jnp.all(a == a[:, 0:1], axis=1)", "metadata": {"problem_id": 78, "library_problem_id": 78, "library": "JAX", "test_case_cnt": 5, "perturbation_type": "Semantic", "perturbation_origin_id": 77}}
{"id": 79, "code": "```python\n    return jnp.all(jnp.equal(a, a[0, :]), axis=1).all()\n```", "metadata": {"problem_id": 79, "library_problem_id": 79, "library": "JAX", "test_case_cnt": 5, "perturbation_type": "Surface", "perturbation_origin_id": 77}}
{"id": 80, "code": "```python\nimport jax.numpy as jnp\nfrom scipy.integrate import simps\n\n# Create a meshgrid for x and y\nX, Y = jnp.meshgrid(x, y)\n\n# Define the function to integrate\nZ = (jnp.cos(X))**4 + (jnp.sin(Y))**2\n\n# Perform the 2D Simpson's rule integration\nresult = simps(simps(Z, y), x)\n```", "metadata": {"problem_id": 80, "library_problem_id": 80, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 80}}
{"id": 81, "code": "```python\n    z = (jnp.cos(x[:, None])**4 + jnp.sin(y[None, :])**2)\n    return jnp.sum(z) * (example_x[1] - example_x[0]) * (example_y[1] - example_y[0]) / 4\n```", "metadata": {"problem_id": 81, "library_problem_id": 81, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 80}}
{"id": 82, "code": "```python\ndef ecdf(x):\n    # Sort the input array\n    x_sorted = jnp.sort(x)\n    # Calculate the cumulative distribution function\n    n = x_sorted.size\n    return jnp.arange(1, n + 1) / n\n\nresult = ecdf(grades)(grades)\n```", "metadata": {"problem_id": 82, "library_problem_id": 82, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 82}}
{"id": 83, "code": "```python\ndef ecdf(x):\n    # Sort the input array\n    sorted_x = jnp.sort(x)\n    # Calculate the ECDF values\n    ecdf_values = jnp.arange(1, len(sorted_x) + 1) / len(sorted_x)\n    return lambda y: ecdf_values[jnp.searchsorted(sorted_x, y, side='right') - 1]\n\n# Generate the ECDF function\necdf_function = ecdf(grades)\n\n# Apply the ECDF function to the eval array\nresult = ecdf_function(eval)\n```", "metadata": {"problem_id": 83, "library_problem_id": 83, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 84, "code": "```python\nimport jax.numpy as jnp\n\n# Compute the empirical cumulative distribution function (ECDF)\ndef ecdf(x):\n    sorted_x = jnp.sort(x)\n    n = sorted_x.size\n    cdf = jnp.arange(1, n + 1) / n\n    return sorted_x, cdf\n\n# Find the longest interval [low, high) such that ECDF(x) < threshold\ndef find_interval(x, threshold):\n    sorted_x, cdf = ecdf(x)\n    valid_indices = jnp.where(cdf < threshold)[0]\n    \n    if valid_indices.size == 0:\n        return None, None  # No valid interval found\n    \n    low_index = valid_indices[0]\n    high_index = valid_indices[-1] + 1  # Exclusive upper bound\n    \n    return sorted_x[low_index], sorted_x[high_index - 1]\n\nlow, high = find_interval(grades, threshold)\n```", "metadata": {"problem_id": 84, "library_problem_id": 84, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 82}}
{"id": 85, "code": "```python\nnum_ones = int(size * one_ratio)\nnum_zeros = size - num_ones\nnums = jnp.concatenate((jnp.ones(num_ones), jnp.zeros(num_zeros)))\nnums = jnp.random.permutation(nums)\n```", "metadata": {"problem_id": 85, "library_problem_id": 85, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 85}}
{"id": 86, "code": "```python\na_np = jnp.array(a.numpy())\nEND SOLUTION", "metadata": {"problem_id": 86, "library_problem_id": 86, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 86}}
{"id": 87, "code": "```python\na_pt = torch.tensor(a)", "metadata": {"problem_id": 87, "library_problem_id": 87, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 86}}
{"id": 88, "code": "```python\na_np = jnp.array(a.numpy())", "metadata": {"problem_id": 88, "library_problem_id": 88, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 88}}
{"id": 89, "code": "```python\na_tf = tf.convert_to_tensor(a)", "metadata": {"problem_id": 89, "library_problem_id": 89, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 88}}
{"id": 90, "code": "```python\nresult = jnp.argsort(-a)\n```", "metadata": {"problem_id": 90, "library_problem_id": 90, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 90}}
{"id": 91, "code": "```python\nresult = jnp.argsort(a).tolist()\n```", "metadata": {"problem_id": 91, "library_problem_id": 91, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 90}}
{"id": 92, "code": "```python\nresult = jnp.argsort(a)[-N:][::-1]\n```", "metadata": {"problem_id": 92, "library_problem_id": 92, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 90}}
{"id": 93, "code": "```python\nresult = jnp.linalg.matrix_power(A, n)", "metadata": {"problem_id": 93, "library_problem_id": 93, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 93}}
{"id": 94, "code": "```python\nresult = a.reshape(2, 2, -1, 2).transpose(0, 2, 1, 3).reshape(-1, 2, 2)\n```", "metadata": {"problem_id": 94, "library_problem_id": 94, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 94}}
{"id": 95, "code": "```python\nfrom jax import numpy as jnp\n\ndef extract_patches(arr, patch_size):\n    patches = []\n    rows, cols = arr.shape\n    for i in range(rows - patch_size + 1):\n        for j in range(cols - patch_size + 1):\n            patches.append(arr[i:i + patch_size, j:j + patch_size])\n    return jnp.array(patches)\n\nresult = extract_patches(a, 2)\n```", "metadata": {"problem_id": 95, "library_problem_id": 95, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 96, "code": "```python\nresult = a.reshape(2, 2, -1, 2).transpose(0, 2, 1, 3).reshape(-1, 2, 2)\n```", "metadata": {"problem_id": 96, "library_problem_id": 96, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 94}}
{"id": 97, "code": "```python\nimport jax.numpy as jnp\n\n# Calculate the shape of the output patches\nrows, cols = a.shape\npatch_rows = rows // patch_size\npatch_cols = cols // patch_size\n\n# Reshape and extract patches\nresult = a[:patch_rows * patch_size, :patch_cols * patch_size].reshape(patch_rows, patch_size, patch_cols, patch_size).swapaxes(1, 2).reshape(-1, patch_size, patch_size)\n```", "metadata": {"problem_id": 97, "library_problem_id": 97, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 98, "code": "```python\nresult = a.reshape(h, -1)\n```", "metadata": {"problem_id": 98, "library_problem_id": 98, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 99, "code": "```python\nimport jax.numpy as jnp\n\n# Calculate the shape of the output\nrows, cols = a.shape\nnew_rows = rows // patch_size\nnew_cols = cols // patch_size\n\n# Reshape and extract patches\nresult = a[:new_rows * patch_size, :new_cols * patch_size].reshape(new_rows, patch_size, new_cols, patch_size).swapaxes(1, 2).reshape(-1, patch_size, patch_size)\n```", "metadata": {"problem_id": 99, "library_problem_id": 99, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 94}}
{"id": 100, "code": "```python\nresult = a[:, low:high]\n```", "metadata": {"problem_id": 100, "library_problem_id": 100, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 100}}
{"id": 101, "code": "```python\nresult = a[low:high]", "metadata": {"problem_id": 101, "library_problem_id": 101, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 100}}
{"id": 102, "code": "```python\nresult = a[:, low:min(high, a.shape[1])]\n```", "metadata": {"problem_id": 102, "library_problem_id": 102, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 100}}
{"id": 103, "code": "```python\na = jnp.array(eval(string))", "metadata": {"problem_id": 103, "library_problem_id": 103, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 103}}
{"id": 104, "code": "```python\nresult = jnp.exp(jnp.random.uniform(jnp.log(min), jnp.log(max), n))\n```", "metadata": {"problem_id": 104, "library_problem_id": 104, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 104}}
{"id": 105, "code": "```python\nresult = jnp.exp(jnp.random.uniform(min, max, n))\n```", "metadata": {"problem_id": 105, "library_problem_id": 105, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 104}}
{"id": 106, "code": "```python\n    # Generate uniform samples in the log space\n    log_min = jnp.log(min)\n    log_max = jnp.log(max)\n    uniform_samples = jnp.random.uniform(log_min, log_max, n)\n    \n    # Transform back to the original scale\n    result = jnp.exp(uniform_samples)\n    return result\n```", "metadata": {"problem_id": 106, "library_problem_id": 106, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 104}}
{"id": 107, "code": "```python\nB = pd.Series(index=A.index, dtype=float)\nB[0] = a * A[0]\nfor t in range(1, len(A)):\n    B[t] = a * A[t] + b * B[t-1]\n```", "metadata": {"problem_id": 107, "library_problem_id": 107, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 107}}
{"id": 108, "code": "```python\nB = jnp.zeros(len(A))\nB = B.at[0].set(a * A[0])\n\nfor t in range(1, len(A)):\n    if t == 1:\n        B = B.at[t].set(a * A[t] + b * B[t-1])\n    else:\n        B = B.at[t].set(a * A[t] + b * B[t-1] + c * B[t-2])\n```", "metadata": {"problem_id": 108, "library_problem_id": 108, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 107}}
{"id": 109, "code": "```python\nresult = jnp.empty((0,))", "metadata": {"problem_id": 109, "library_problem_id": 109, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 109}}
{"id": 110, "code": "```python\nresult = jnp.empty((3, 0))", "metadata": {"problem_id": 110, "library_problem_id": 110, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 109}}
{"id": 111, "code": "```python\nresult = index[0] + dims[0] * (index[1] + dims[1] * index[2])\n```", "metadata": {"problem_id": 111, "library_problem_id": 111, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 111}}
{"id": 112, "code": "```python\nresult = jnp.ravel_multi_index(index, dims, order='C')\n```", "metadata": {"problem_id": 112, "library_problem_id": 112, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 111}}
{"id": 113, "code": "```python\ndf = pd.DataFrame(data=values.astype(object), index=index, columns=columns)\n```", "metadata": {"problem_id": 113, "library_problem_id": 113, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 113}}
{"id": 114, "code": "```python\nresult = jnp.bincount(accmap, weights=a)\n```", "metadata": {"problem_id": 114, "library_problem_id": 114, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 114}}
{"id": 115, "code": "```python\nresult = jnp.array([jnp.max(a[index == i]) for i in jnp.unique(index)])\n```", "metadata": {"problem_id": 115, "library_problem_id": 115, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 116, "code": "```python\nresult = jnp.bincount(accmap + 1, weights=a)  # Shift indices to be non-negative\n```", "metadata": {"problem_id": 116, "library_problem_id": 116, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 114}}
{"id": 117, "code": "```python\nresult = jnp.array([jnp.min(a[index == i]) for i in jnp.unique(index)])\n```", "metadata": {"problem_id": 117, "library_problem_id": 117, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 114}}
{"id": 118, "code": "```python\nz = jnp.add(jnp.array(x), jnp.array(y))\n```", "metadata": {"problem_id": 118, "library_problem_id": 118, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 118}}
{"id": 119, "code": "```python\nresult = jax.numpy.random.choice(len(lista_elegir), samples, p=probabilit)\nselected_samples = [lista_elegir[i] for i in result]\n```", "metadata": {"problem_id": 119, "library_problem_id": 119, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 119}}
{"id": 120, "code": "```python\nresult = jnp.pad(a, ((max(0, -low_index), max(0, high_index - a.shape[0])), \n                     (max(0, -low_index), max(0, high_index - a.shape[1]))), \n                  mode='constant', constant_values=0)[low_index:high_index, low_index:high_index]\n```", "metadata": {"problem_id": 120, "library_problem_id": 120, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 120}}
{"id": 121, "code": "```python\nresult = x[x >= 0]\n```", "metadata": {"problem_id": 121, "library_problem_id": 121, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 121}}
{"id": 122, "code": "```python\nresult = x[jnp.iscomplexobj(x)]\n```", "metadata": {"problem_id": 122, "library_problem_id": 122, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 121}}
{"id": 123, "code": "```python\nn_bins = data.size // bin_size\nbinned_data = data[:n_bins * bin_size].reshape(n_bins, bin_size)\nbin_data_mean = jnp.mean(binned_data, axis=1)\n```", "metadata": {"problem_id": 123, "library_problem_id": 123, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 123}}
{"id": 124, "code": "```python\nn_bins = data.size // bin_size\nbinned_data = data[:n_bins * bin_size].reshape(n_bins, bin_size)\nbin_data_max = jnp.max(binned_data, axis=1)\n```", "metadata": {"problem_id": 124, "library_problem_id": 124, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 125, "code": "```python\nimport jax.numpy as jnp\n\n# Calculate the number of complete bins\nnum_bins = data.shape[1] // bin_size\n\n# Reshape the data to create bins and calculate the mean\nbin_data_mean = jnp.mean(data[:, :num_bins * bin_size].reshape(data.shape[0], num_bins, bin_size), axis=2)\n```", "metadata": {"problem_id": 125, "library_problem_id": 125, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 126, "code": "```python\nn = data.size\nnum_bins = n // bin_size\nbinned_data = data[-(num_bins * bin_size):].reshape(num_bins, bin_size)\nbin_data_mean = jnp.mean(binned_data, axis=1)\n```", "metadata": {"problem_id": 126, "library_problem_id": 126, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 123}}
{"id": 127, "code": "```python\n# Calculate the number of bins\nnum_bins = data.shape[1] // bin_size\n\n# Create the binned data by slicing from the end\nbinned_data = data[:, -num_bins * bin_size:].reshape(data.shape[0], num_bins, bin_size)\n\n# Calculate the mean of each bin\nbin_data_mean = jnp.mean(binned_data, axis=2)\n```", "metadata": {"problem_id": 127, "library_problem_id": 127, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 128, "code": "```python\n# Calculate the number of bins that can fit in each row\nnum_bins = data.shape[1] // bin_size\n\n# Align the data to the end and reshape\naligned_data = data[:, -num_bins * bin_size:]\n\n# Reshape to create bins\nbinned_data = aligned_data.reshape(data.shape[0], num_bins, bin_size)\n\n# Calculate the mean of each bin\nbin_data_mean = jnp.mean(binned_data, axis=2)\n```", "metadata": {"problem_id": 128, "library_problem_id": 128, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 123}}
{"id": 129, "code": "```python\ndef smoothclamp(x, x_min, x_max):\n    # Calculate the smooth transition points\n    if x < x_min:\n        return x_min\n    elif x > x_max:\n        return x_max\n    else:\n        t = (x - x_min) / (x_max - x_min)\n        return (1 - 3*t**2 + 2*t**3) * x + (3*t**2 - 2*t**3) * x_max + (t**3) * x_min\n```", "metadata": {"problem_id": 129, "library_problem_id": 129, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 129}}
{"id": 130, "code": "```python\ndef smoothclamp(x, x_min, x_max, N):\n    def smoothstep(t):\n        return t * t * t * (t * (t * 6 - 15) + 10)\n\n    # Normalize x to the range [0, 1]\n    normalized_x = jnp.clip((x - x_min) / (x_max - x_min), 0, 1)\n    \n    # Apply the smoothstep function\n    smoothed_value = smoothstep(normalized_x)\n    \n    # Interpolate between min and max\n    return x_min + smoothed_value * (x_max - x_min)\n```", "metadata": {"problem_id": 130, "library_problem_id": 130, "library": "JAX", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 129}}
{"id": 131, "code": "```python\nresult = jnp.correlate(a, b, mode='full')[:len(a)]  # This gives the circular correlation\n```", "metadata": {"problem_id": 131, "library_problem_id": 131, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 131}}
{"id": 132, "code": "```python\nresult = jnp.array(df.values.reshape(4, 15, 5))\n```", "metadata": {"problem_id": 132, "library_problem_id": 132, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 132}}
{"id": 133, "code": "```python\nresult = jnp.array(df.values.reshape(15, 4, 5))\n```", "metadata": {"problem_id": 133, "library_problem_id": 133, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 132}}
{"id": 134, "code": "```python\nresult = jnp.array([(jnp.array(list(map(int, f\"{num:0{m}b\")))) for num in a])\n```", "metadata": {"problem_id": 134, "library_problem_id": 134, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 134}}
{"id": 135, "code": "```python\ndef int_to_binary_array(arr, m):\n    # Ensure the input is a JAX array\n    arr = jnp.asarray(arr)\n    # Create a mask to get the last m bits\n    mask = (1 << m) - 1\n    # Apply the mask and convert to binary\n    binary_arr = (arr & mask)[:, None] >> jnp.arange(m)[None, :]\n    # Get the last m bits and convert to binary (0 or 1)\n    return (binary_arr & 1).astype(jnp.uint8)\n\nresult = int_to_binary_array(a, m)\n```", "metadata": {"problem_id": 135, "library_problem_id": 135, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 136, "code": "```python\n# Convert integers to binary representation\nbinary_arrays = jnp.array([(jnp.array(list(map(int, f\"{num:0{m}b}\"))) for num in a)])\n\n# Compute the exclusive OR across all rows\nresult = jnp.bitwise_xor.reduce(binary_arrays, axis=0)\n```", "metadata": {"problem_id": 136, "library_problem_id": 136, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 134}}
{"id": 137, "code": "```python\nmean = jnp.mean(a)\nstd_dev = jnp.std(a)\nresult = (mean - 3 * std_dev, mean + 3 * std_dev)\n```", "metadata": {"problem_id": 137, "library_problem_id": 137, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 137}}
{"id": 138, "code": "```python\nmean = jnp.mean(a)\nstd_dev = jnp.std(a)\nresult = (mean - 2 * std_dev, mean + 2 * std_dev)\n```", "metadata": {"problem_id": 138, "library_problem_id": 138, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 137}}
{"id": 139, "code": "```python\n    mu = jnp.mean(a)\n    sigma = jnp.std(a)\n    return (mu - 3 * sigma, mu + 3 * sigma)\n```", "metadata": {"problem_id": 139, "library_problem_id": 139, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 137}}
{"id": 140, "code": "```python\nmean = jnp.mean(a)\nstd_dev = jnp.std(a)\nlower_bound = mean - 2 * std_dev\nupper_bound = mean + 2 * std_dev\nresult = (a < lower_bound) | (a > upper_bound)\n```", "metadata": {"problem_id": 140, "library_problem_id": 140, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 137}}
{"id": 141, "code": "```python\nimport jax.numpy as jnp\nimport jax.numpy.ma as ma\n\nDataArray = jnp.arange(-5.5, 10.5)\nmasked_data = ma.masked_where(DataArray < 0, DataArray)\npercentile = 50\nprob = jnp.percentile(masked_data.compressed(), percentile)\n```", "metadata": {"problem_id": 141, "library_problem_id": 141, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 141}}
{"id": 142, "code": "```python\na = a.at[zero_rows, :].set(0).at[:, zero_cols].set(0)\n```", "metadata": {"problem_id": 142, "library_problem_id": 142, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 142}}
{"id": 143, "code": "```python\na = a.at[zero_rows, :].set(0).at[:, zero_cols].set(0)\n```", "metadata": {"problem_id": 143, "library_problem_id": 143, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 144, "code": "```python\na = a.at[1, :].set(0)  # Zero out the second row\na = a.at[:, 0].set(0)  # Zero out the first column\n```", "metadata": {"problem_id": 144, "library_problem_id": 144, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 142}}
{"id": 145, "code": "```python\nmask = jnp.equal(a, jnp.max(a, axis=1, keepdims=True))\n```", "metadata": {"problem_id": 145, "library_problem_id": 145, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 145}}
{"id": 146, "code": "```python\nmask = a == jnp.min(a, axis=1, keepdims=True)\n", "metadata": {"problem_id": 146, "library_problem_id": 146, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 145}}
{"id": 147, "code": "```python\nresult = jnp.corrcoef(post, distance)[0, 1]\n```", "metadata": {"problem_id": 147, "library_problem_id": 147, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 147}}
{"id": 148, "code": "```python\nresult = jnp.einsum('ij,ik->jk', X, X).reshape(X.shape[1], X.shape[1], X.shape[0])\n```", "metadata": {"problem_id": 148, "library_problem_id": 148, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 148}}
{"id": 149, "code": "```python\nX = jnp.array([jnp.linalg.cholesky(Y[i]).T for i in range(Y.shape[0])])\n```", "metadata": {"problem_id": 149, "library_problem_id": 149, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 148}}
{"id": 150, "code": "```python\nis_contained = jnp.any(a == number)\n```", "metadata": {"problem_id": 150, "library_problem_id": 150, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 150}}
{"id": 151, "code": "```python\nC = A[~jnp.isin(A, B)]\n```", "metadata": {"problem_id": 151, "library_problem_id": 151, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 151}}
{"id": 152, "code": "```python\nC = A[jnp.isin(A, B)]\n```", "metadata": {"problem_id": 152, "library_problem_id": 152, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 151}}
{"id": 153, "code": "```python\nC = A[(A > B[:-1][:, None]) & (A < B[1:][:, None])].flatten()\n```", "metadata": {"problem_id": 153, "library_problem_id": 153, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 151}}
{"id": 154, "code": "```python\nresult = len(a) + 1 - rankdata(a).astype(int)\n```", "metadata": {"problem_id": 154, "library_problem_id": 154, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 154}}
{"id": 155, "code": "```python\nresult = jnp.argsort(jnp.argsort(-jnp.array(a))).astype(int)\n```", "metadata": {"problem_id": 155, "library_problem_id": 155, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 154}}
{"id": 156, "code": "```python\n    ranks = rankdata(a, method='min')\n    return len(a) + 1 - ranks.astype(int)\n```", "metadata": {"problem_id": 156, "library_problem_id": 156, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 154}}
{"id": 157, "code": "```python\ndists = jnp.stack((x_dists, y_dists), axis=-1)\n```", "metadata": {"problem_id": 157, "library_problem_id": 157, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 157}}
{"id": 158, "code": "```python\ndists = jnp.stack((x_dists, y_dists), axis=-1)\n```", "metadata": {"problem_id": 158, "library_problem_id": 158, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 157}}
{"id": 159, "code": "```python\nresult = a[:, second, :][:, :, third]\n```", "metadata": {"problem_id": 159, "library_problem_id": 159, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 159}}
{"id": 160, "code": "```python\narr = jnp.zeros((20, 10, 10, 2))\n```", "metadata": {"problem_id": 160, "library_problem_id": 160, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 160}}
{"id": 161, "code": "```python\nl1 = jnp.sum(jnp.abs(X), axis=1)\nresult = X / l1[:, None]\n```", "metadata": {"problem_id": 161, "library_problem_id": 161, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 161}}
{"id": 162, "code": "```python\nresult = X / LA.norm(X, ord=2, axis=1, keepdims=True)\n```", "metadata": {"problem_id": 162, "library_problem_id": 162, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 163, "code": "```python\nresult = X / jnp.max(jnp.abs(X), axis=1, keepdims=True)\n```", "metadata": {"problem_id": 163, "library_problem_id": 163, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 161}}
{"id": 164, "code": "```python\nconditions = [df['a'].str.contains(target)]\nresult = jnp.select(conditions, choices, default=df['a'])\n```", "metadata": {"problem_id": 164, "library_problem_id": 164, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 164}}
{"id": 165, "code": "```python\nfrom jax import vmap\n\ndef euclidean_distance(x, y):\n    return jnp.sqrt(jnp.sum((x - y) ** 2))\n\nresult = vmap(lambda x: vmap(lambda y: euclidean_distance(x, y))(a))(a)\n```", "metadata": {"problem_id": 165, "library_problem_id": 165, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 165}}
{"id": 166, "code": "```python\nresult = jnp.linalg.norm(a[:, None] - a[None, :], axis=-1)\n```", "metadata": {"problem_id": 166, "library_problem_id": 166, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 165}}
{"id": 167, "code": "```python\nfrom jax import vmap\n\n# Function to calculate the pairwise distance\ndef pairwise_distance(x, y):\n    return jnp.sqrt(jnp.sum((x - y) ** 2))\n\n# Create a distance matrix\ndistance_matrix = vmap(vmap(pairwise_distance))(a, a)\n\n# Extract the upper triangle of the distance matrix\nupper_triangle_indices = jnp.triu_indices(distance_matrix.shape[0])\nresult = distance_matrix[upper_triangle_indices]\n```", "metadata": {"problem_id": 167, "library_problem_id": 167, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 165}}
{"id": 168, "code": "```python\nAVG = jnp.mean(jnp.array(A, dtype=jnp.float32))\n```", "metadata": {"problem_id": 168, "library_problem_id": 168, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 168}}
{"id": 169, "code": "```python\nNA = jnp.where(NA == 'inf', jnp.inf, NA.astype(jnp.float32))\nAVG = jnp.nanmean(NA)\n```", "metadata": {"problem_id": 169, "library_problem_id": 169, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 168}}
{"id": 170, "code": "```python\nNA = jnp.asarray([float(x) if x != 'jnp.inf' else jnp.inf for x in A])\nAVG = jnp.mean(NA)\n```", "metadata": {"problem_id": 170, "library_problem_id": 170, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 168}}
{"id": 171, "code": "```python\nmask = (a != 0)  # Create a mask for non-zero values\nfiltered = a[mask]  # Filter out zeros\nresult = filtered[jnp.concatenate(([True], filtered[1:] != filtered[:-1]))]  # Remove adjacent duplicates\n```", "metadata": {"problem_id": 171, "library_problem_id": 171, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 171}}
{"id": 172, "code": "```python\nnon_zero = a[a != 0]\nresult = non_zero[jnp.concatenate(([True], non_zero[1:] != non_zero[:-1]))]\n```", "metadata": {"problem_id": 172, "library_problem_id": 172, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 171}}
{"id": 173, "code": "```python\nimport jax.numpy as jnp\nimport pandas as pd\n\nlat = jnp.array([[10, 20, 30],\n                 [20, 11, 33],\n                 [21, 20, 10]])\n\nlon = jnp.array([[100, 102, 103],\n                 [105, 101, 102],\n                 [100, 102, 103]])\n\nval = jnp.array([[17, 2, 11],\n                 [86, 84, 1],\n                 [9, 5, 10]])\n\n# Flatten the arrays and create a DataFrame\ndf = pd.DataFrame({\n    'lat': lat.flatten(),\n    'lon': lon.flatten(),\n    'val': val.flatten()\n})\n```", "metadata": {"problem_id": 173, "library_problem_id": 173, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 173}}
{"id": 174, "code": "```python\n    import pandas as pd\n\n    # Stack the arrays and reshape them\n    lat_flat = lat.flatten()\n    lon_flat = lon.flatten()\n    val_flat = val.flatten()\n\n    # Create a DataFrame\n    df = pd.DataFrame({'lat': lat_flat, 'lon': lon_flat, 'val': val_flat})\n    \n    return df\n```", "metadata": {"problem_id": 174, "library_problem_id": 174, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 173}}
{"id": 175, "code": "```python\nimport jax.numpy as jnp\nimport pandas as pd\n\nlat_flat = lat.flatten()\nlon_flat = lon.flatten()\nval_flat = val.flatten()\n\ndf = pd.DataFrame({'lat': lat_flat, 'lon': lon_flat, 'val': val_flat})\ndf['maximum'] = df[['lat', 'lon', 'val']].max(axis=1)\n```", "metadata": {"problem_id": 175, "library_problem_id": 175, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 173}}
{"id": 176, "code": "```python\nfrom jax import vmap\n\ndef get_window(a, i, j, size):\n    h, w = size\n    return a[max(0, i-h//2):min(a.shape[0], i+h//2+1), max(0, j-w//2):min(a.shape[1], j+w//2+1)]\n\nresult = vmap(lambda i, j: get_window(a, i, j, size))(jnp.arange(a.shape[0])[:, None], jnp.arange(a.shape[1]))\nresult = result.reshape(-1).tolist()\n```", "metadata": {"problem_id": 176, "library_problem_id": 176, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 176}}
{"id": 177, "code": "```python\nfrom jax import vmap\n\ndef get_window(a, center, size):\n    h, w = size\n    r, c = center\n    return a[max(0, r - h // 2):min(a.shape[0], r + h // 2 + 1),\n              max(0, c - w // 2):min(a.shape[1], c + w // 2 + 1)]\n\ncenters = jnp.array(jnp.meshgrid(jnp.arange(a.shape[0]), jnp.arange(a.shape[1]), indexing='ij')).reshape(2, -1).T\nresult = vmap(lambda center: get_window(a, center, size))(centers)\nresult = result.reshape(a.shape[0], a.shape[1]).tolist()\n```", "metadata": {"problem_id": 177, "library_problem_id": 177, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 176}}
{"id": 178, "code": "```python\nresult = jnp.mean(a).real + 0j  # Take the real part to avoid NaN in the imaginary part\nEND SOLUTION", "metadata": {"problem_id": 178, "library_problem_id": 178, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 178}}
{"id": 179, "code": "```python\n    result = jnp.where(jnp.isinf(a), jnp.inf, jnp.mean(a))\n    return result\n```", "metadata": {"problem_id": 179, "library_problem_id": 179, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 178}}
{"id": 180, "code": "```python\nresult = Z[tuple(slice(None) if i < Z.ndim - 1 else slice(-1, None) for i in range(Z.ndim))]\n```", "metadata": {"problem_id": 180, "library_problem_id": 180, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 180}}
{"id": 181, "code": "```python\nresult = a[jnp.index_exp[-1, *([slice(None)] * (a.ndim - 1))]]\n```", "metadata": {"problem_id": 181, "library_problem_id": 181, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 180}}
{"id": 182, "code": "```python\nresult = any(jnp.array_equal(c, cnt) for cnt in CNTS)\n```", "metadata": {"problem_id": 182, "library_problem_id": 182, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Origin", "perturbation_origin_id": 182}}
{"id": 183, "code": "```python\nresult = any(jnp.all(jnp.isnan(c) == jnp.isnan(cnt)) & jnp.all(c == cnt) for cnt in CNTS)\n```", "metadata": {"problem_id": 183, "library_problem_id": 183, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 182}}
{"id": 184, "code": "```python\nf = intp.interp2d(jnp.arange(a.shape[0]), jnp.arange(a.shape[1]), a, kind='linear')\nresult = f(x_new, y_new)\n```", "metadata": {"problem_id": 184, "library_problem_id": 184, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 184}}
{"id": 185, "code": "```python\ndf[name] = df.groupby('D')['Q'].cumsum()\n```", "metadata": {"problem_id": 185, "library_problem_id": 185, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 185}}
{"id": 186, "code": "```python\ni = jnp.diag(i)\n```", "metadata": {"problem_id": 186, "library_problem_id": 186, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 186}}
{"id": 187, "code": "```python\na = jnp.where(jnp.eye(a.shape[0], dtype=bool), a, 0)\n```", "metadata": {"problem_id": 187, "library_problem_id": 187, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 187}}
{"id": 188, "code": "```python\nt0 = pd.to_datetime(start)\ntf = pd.to_datetime(end)\ntimestamps = pd.to_datetime(jnp.linspace(t0.value, tf.value, n))\nresult = pd.DatetimeIndex(timestamps)\n```", "metadata": {"problem_id": 188, "library_problem_id": 188, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 188}}
{"id": 189, "code": "```python\nresult = jnp.where((x == a) & (y == b), jnp.arange(len(x)), -1)[0].max()", "metadata": {"problem_id": 189, "library_problem_id": 189, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 189}}
{"id": 190, "code": "```python\nresult = jnp.where((x == a) & (y == b))[0]\n```", "metadata": {"problem_id": 190, "library_problem_id": 190, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Semantic", "perturbation_origin_id": 189}}
{"id": 191, "code": "```python\nfrom jax import grad, jit\nfrom jax import numpy as jnp\nfrom jax.scipy.optimize import minimize\n\n# Define the function to approximate\ndef f(x, params):\n    a, b, c = params\n    return a * x ** 2 + b * x + c\n\n# Define the loss function (squared error)\ndef loss(params):\n    return jnp.sum((f(jnp.array(x), params) - jnp.array(y)) ** 2)\n\n# Initial guess for a, b, c\ninitial_guess = jnp.array([0.0, 0.0, 0.0])\n\n# Minimize the loss function\nresult = minimize(loss, initial_guess).x\n```", "metadata": {"problem_id": 191, "library_problem_id": 191, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 191}}
{"id": 192, "code": "```python\nfrom jax import grad, jit\nfrom jax import numpy as jnp\nfrom jax.scipy.optimize import minimize\n\ndef polynomial(params, x):\n    return jnp.polyval(params, x)\n\ndef loss(params, x, y):\n    return jnp.sum((polynomial(params, x) - y) ** 2)\n\ninitial_guess = jnp.zeros(degree + 1)\nresult = minimize(loss, initial_guess, args=(jnp.array(x), jnp.array(y)))\ncoefficients = result.x\n```", "metadata": {"problem_id": 192, "library_problem_id": 192, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 191}}
{"id": 193, "code": "```python\ndf = df.sub(temp_arr, axis=0)\n```", "metadata": {"problem_id": 193, "library_problem_id": 193, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 193}}
{"id": 194, "code": "```python\nresult = jnp.einsum('ijk,kl->ijl', A, B)\n```", "metadata": {"problem_id": 194, "library_problem_id": 194, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 194}}
{"id": 195, "code": "```python\nresult = jnp.array(MinMaxScaler().fit_transform(a.reshape(-1, 1))).reshape(a.shape)", "metadata": {"problem_id": 195, "library_problem_id": 195, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 195}}
{"id": 196, "code": "```python\nscaler = MinMaxScaler()\nresult = jnp.array(scaler.fit_transform(arr))\n```", "metadata": {"problem_id": 196, "library_problem_id": 196, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 197, "code": "```python\nresult = jnp.array([MinMaxScaler().fit_transform(matrix) for matrix in a])\n```", "metadata": {"problem_id": 197, "library_problem_id": 197, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 195}}
{"id": 198, "code": "```python\narr_temp = arr.copy()\nmask1 = arr_temp < -10\nmask2 = arr_temp >= 15\nmask3 = (arr_temp >= -10) & (arr_temp < 15)\n\narr = jnp.where(mask1, 0, jnp.where(mask2, 30, arr_temp + 5))\n```", "metadata": {"problem_id": 198, "library_problem_id": 198, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 198}}
{"id": 199, "code": "```python\nfor i in range(arr.shape[0]):\n    mask = arr[i] < n1[i]\n    mask2 = arr[i] >= n2[i]\n    arr[i, mask] = 0\n    arr[i, ~mask2] = 30\n    arr[i, ~mask & ~mask2] += 5\n```", "metadata": {"problem_id": 199, "library_problem_id": 199, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Semantic", "perturbation_origin_id": 198}}
{"id": 200, "code": "```python\ntolerance = 1e-7\nresult = jnp.sum(jnp.abs(s1 - s2) > tolerance)\n```", "metadata": {"problem_id": 200, "library_problem_id": 200, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 200}}
{"id": 201, "code": "```python\nresult = jnp.sum(jnp.isnan(s1) & jnp.isnan(s2)) + jnp.sum(~jnp.isnan(s1) & ~jnp.isnan(s2) & (jnp.abs(s1 - s2) > 1e-7))\n```", "metadata": {"problem_id": 201, "library_problem_id": 201, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 200}}
{"id": 202, "code": "```python\nresult = jnp.all(jnp.array([jnp.array_equal(a[0], arr) for arr in a]))\n```", "metadata": {"problem_id": 202, "library_problem_id": 202, "library": "JAX", "test_case_cnt": 5, "perturbation_type": "Origin", "perturbation_origin_id": 202}}
{"id": 203, "code": "```python\nresult = all(jnp.any(jnp.isnan(arr)) for arr in a)\n```", "metadata": {"problem_id": 203, "library_problem_id": 203, "library": "JAX", "test_case_cnt": 5, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 202}}
{"id": 204, "code": "```python\nresult = jnp.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant')\n```", "metadata": {"problem_id": 204, "library_problem_id": 204, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 204}}
{"id": 205, "code": "```python\nresult = jnp.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), mode='constant')\n```", "metadata": {"problem_id": 205, "library_problem_id": 205, "library": "JAX", "test_case_cnt": 4, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 206, "code": "```python\nresult = jnp.pad(a, ((0, shape[0] - a.shape[0]), (0, shape[1] - a.shape[1])), constant_values=element)\n```", "metadata": {"problem_id": 206, "library_problem_id": 206, "library": "JAX", "test_case_cnt": 4, "perturbation_type": "Semantic", "perturbation_origin_id": 204}}
{"id": 207, "code": "```python\n    padded_arr = jnp.zeros(shape)\n    padded_arr = padded_arr.at[:arr.shape[0], :arr.shape[1]].set(arr)\n    return padded_arr\n```", "metadata": {"problem_id": 207, "library_problem_id": 207, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Surface", "perturbation_origin_id": 204}}
{"id": 208, "code": "```python\nimport jax.numpy as jnp\n\ndef zero_pad(array, target_shape):\n    pad_height = target_shape[0] - array.shape[0]\n    pad_width = target_shape[1] - array.shape[1]\n    \n    pad_top = pad_height // 2\n    pad_bottom = pad_height - pad_top\n    pad_left = pad_width // 2\n    pad_right = pad_width - pad_left\n    \n    padded_array = jnp.pad(array, ((pad_top, pad_bottom), (pad_left, pad_right)), mode='constant', constant_values=0)\n    return padded_array\n\na = jnp.ones((41, 12))\nshape = (93, 13)\nresult = zero_pad(a, shape)\n```", "metadata": {"problem_id": 208, "library_problem_id": 208, "library": "JAX", "test_case_cnt": 4, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 204}}
{"id": 209, "code": "```python\na = a.reshape(a.shape[0] // 3, 3)\n```", "metadata": {"problem_id": 209, "library_problem_id": 209, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 209}}
{"id": 210, "code": "```python\nresult = a[jnp.arange(a.shape[0])[:, None], jnp.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 210, "library_problem_id": 210, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 210}}
{"id": 211, "code": "```python\nresult = a[jnp.arange(a.shape[0])[:, None], jnp.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 211, "library_problem_id": 211, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 210}}
{"id": 212, "code": "```python\nresult = a[jnp.arange(a.shape[0])[:, None], jnp.arange(a.shape[1]), b]\n```", "metadata": {"problem_id": 212, "library_problem_id": 212, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Semantic", "perturbation_origin_id": 210}}
{"id": 213, "code": "```python\nresult = jnp.sum(a[jnp.arange(a.shape[0])[:, None], jnp.arange(a.shape[1]), b])\n```", "metadata": {"problem_id": 213, "library_problem_id": 213, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 214, "code": "```python\nresult = jnp.sum(a, axis=2) - jnp.sum(a[jnp.arange(a.shape[0])[:, None], jnp.arange(a.shape[1]), b], axis=1)\n```", "metadata": {"problem_id": 214, "library_problem_id": 214, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 210}}
{"id": 215, "code": "```python\nresult = np.where((df['a'] > 1) & (df['a'] <= 4), df['b'], np.nan)\n```", "metadata": {"problem_id": 215, "library_problem_id": 215, "library": "JAX", "test_case_cnt": 1, "perturbation_type": "Origin", "perturbation_origin_id": 215}}
{"id": 216, "code": "```python\nresult = im[jnp.any(im != 0, axis=1)][:, jnp.any(im != 0, axis=0)]\n```", "metadata": {"problem_id": 216, "library_problem_id": 216, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Origin", "perturbation_origin_id": 216}}
{"id": 217, "code": "```python\nnon_zero_rows = jnp.any(A != 0, axis=1)\nnon_zero_cols = jnp.any(A != 0, axis=0)\nresult = A[non_zero_rows][:, non_zero_cols]\n```", "metadata": {"problem_id": 217, "library_problem_id": 217, "library": "JAX", "test_case_cnt": 2, "perturbation_type": "Surface", "perturbation_origin_id": 216}}
{"id": 218, "code": "```python\nnon_zero_rows = jnp.any(im != 0, axis=1)\nnon_zero_cols = jnp.any(im != 0, axis=0)\n\n# Get the indices of the rows and columns to keep\nrows_to_keep = jnp.where(non_zero_rows)[0]\ncols_to_keep = jnp.where(non_zero_cols)[0]\n\n# Slice the image to keep only the relevant rows and columns\nresult = im[rows_to_keep.min():rows_to_keep.max() + 1, cols_to_keep.min():cols_to_keep.max() + 1]\n\n# Check if the result is entirely non-black\nif jnp.all(result == 0):\n    result = jnp.array([])  # Return an empty array if all values are zero\n```", "metadata": {"problem_id": 218, "library_problem_id": 218, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
{"id": 219, "code": "```python\nnon_zero_rows = jnp.any(im != 0, axis=1)\nnon_zero_cols = jnp.any(im != 0, axis=0)\n\nresult = im[jnp.ix_(non_zero_rows, non_zero_cols)]\n```", "metadata": {"problem_id": 219, "library_problem_id": 219, "library": "JAX", "test_case_cnt": 3, "perturbation_type": "Difficult-Rewrite", "perturbation_origin_id": 216}}
